// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: crud.proto

package crud

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CrudService_GetUser_FullMethodName    = "/crud.CrudService/GetUser"
	CrudService_NewUser_FullMethodName    = "/crud.CrudService/NewUser"
	CrudService_DeleteUser_FullMethodName = "/crud.CrudService/DeleteUser"
	CrudService_SetUser_FullMethodName    = "/crud.CrudService/SetUser"
)

// CrudServiceClient is the client API for CrudService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrudServiceClient interface {
	GetUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserSpec, error)
	NewUser(ctx context.Context, in *UserSpec, opts ...grpc.CallOption) (*Id, error)
	DeleteUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserSpec, error)
	SetUser(ctx context.Context, in *UserSpec, opts ...grpc.CallOption) (*UserSpec, error)
}

type crudServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCrudServiceClient(cc grpc.ClientConnInterface) CrudServiceClient {
	return &crudServiceClient{cc}
}

func (c *crudServiceClient) GetUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserSpec, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSpec)
	err := c.cc.Invoke(ctx, CrudService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudServiceClient) NewUser(ctx context.Context, in *UserSpec, opts ...grpc.CallOption) (*Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Id)
	err := c.cc.Invoke(ctx, CrudService_NewUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudServiceClient) DeleteUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserSpec, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSpec)
	err := c.cc.Invoke(ctx, CrudService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudServiceClient) SetUser(ctx context.Context, in *UserSpec, opts ...grpc.CallOption) (*UserSpec, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSpec)
	err := c.cc.Invoke(ctx, CrudService_SetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrudServiceServer is the server API for CrudService service.
// All implementations must embed UnimplementedCrudServiceServer
// for forward compatibility.
type CrudServiceServer interface {
	GetUser(context.Context, *Id) (*UserSpec, error)
	NewUser(context.Context, *UserSpec) (*Id, error)
	DeleteUser(context.Context, *Id) (*UserSpec, error)
	SetUser(context.Context, *UserSpec) (*UserSpec, error)
	mustEmbedUnimplementedCrudServiceServer()
}

// UnimplementedCrudServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCrudServiceServer struct{}

func (UnimplementedCrudServiceServer) GetUser(context.Context, *Id) (*UserSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedCrudServiceServer) NewUser(context.Context, *UserSpec) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewUser not implemented")
}
func (UnimplementedCrudServiceServer) DeleteUser(context.Context, *Id) (*UserSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedCrudServiceServer) SetUser(context.Context, *UserSpec) (*UserSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUser not implemented")
}
func (UnimplementedCrudServiceServer) mustEmbedUnimplementedCrudServiceServer() {}
func (UnimplementedCrudServiceServer) testEmbeddedByValue()                     {}

// UnsafeCrudServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrudServiceServer will
// result in compilation errors.
type UnsafeCrudServiceServer interface {
	mustEmbedUnimplementedCrudServiceServer()
}

func RegisterCrudServiceServer(s grpc.ServiceRegistrar, srv CrudServiceServer) {
	// If the following call pancis, it indicates UnimplementedCrudServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CrudService_ServiceDesc, srv)
}

func _CrudService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).GetUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudService_NewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).NewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudService_NewUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).NewUser(ctx, req.(*UserSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).DeleteUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudService_SetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).SetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudService_SetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).SetUser(ctx, req.(*UserSpec))
	}
	return interceptor(ctx, in, info, handler)
}

// CrudService_ServiceDesc is the grpc.ServiceDesc for CrudService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrudService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crud.CrudService",
	HandlerType: (*CrudServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _CrudService_GetUser_Handler,
		},
		{
			MethodName: "NewUser",
			Handler:    _CrudService_NewUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _CrudService_DeleteUser_Handler,
		},
		{
			MethodName: "SetUser",
			Handler:    _CrudService_SetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crud.proto",
}
